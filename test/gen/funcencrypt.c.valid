#include "c3po.h"
#include <dlfcn.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
__attribute__ ((visibility ("default"))) void sub_b19f(void) {
    puts("hello world");
}
int main(void) {

    {
        void *foobar_mdl = dlopen(NULL, RTLD_NOW | RTLD_LOCAL), *foobar_mfl = NULL;
        if (foobar_mdl) {
            {
                static volatile const uint8_t _foobar_data[] = {
                    0x48, 0x78, 0xc1, 0xe5, 0x27, 0xbb, 0xca, 0xe5, 0x3e, 0x25, 0x2b, 0x6b, 0x1b, 0x3e, 0x95, 0x18, 0xeb, 0xc2, 0xa9, 0x5a, 0x50, 0xe6, 0xe1, 0x64, 0x3e, 0xcb, 0xa1, 0x5b, 0xdd, 0x9a, 0x29, 0x54,
                    0x8d, 0xa8, 0x19, 0x7c, 0x08, 0x4d, 0x38, 0xe9, 0x6e, 0xee, 0x0c, 0x9b, 0xcd, 0x13, 0x7a, 0x0d,
                    0x73, 0x75, 0x62, 0x5f, 0x62, 0x31, 0x39, 0x66, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07
                };
                const uint8_t* _foobar_key = (const uint8_t*)_foobar_data;
                const uint8_t* _foobar_iv = (const uint8_t*)_foobar_data + 32;
                uint8_t _foobar_buf[16];
                const uint8_t* _foobar_enc = (const uint8_t*)_foobar_data + 48;
                memcpy(_foobar_buf, _foobar_enc, 16);

                struct aes_ctx ctx;
                aes_init_ctx_iv(&ctx, _foobar_key, _foobar_iv);
                aes_cbc_decrypt_buffer(&ctx, _foobar_buf, 16);

                //verify padding
                uint8_t pad = _foobar_buf[16-1];
                bool failed = false;
                for (size_t i = 0; i < 16 && i < pad; ++i) {
                    if (_foobar_buf[16-1-i] != pad) {
                        failed = true;
                        break;
                    }
                }
                if (!failed) {
                    foobar_mfl = dlsym(foobar_mdl, (const char*)_foobar_buf);
                    memset(_foobar_buf, 0, 16);
                }
            }

            dlclose(foobar_mdl);
            if (foobar_mfl) {
                ((__typeof__(sub_b19f) *)foobar_mfl)();

#ifndef NDEBUG
            } else {
                puts(dlerror());
            }
        } else {
            puts(dlerror());
        }
#else
            }
        }
#endif
    }    return 0;
}
