#include "c3po.h"
#include <stdint.h>
#include <stdio.h>
#include <string.h>

int main(void) {
    {
        static volatile const uint8_t _HW_data[] = {
                0xb1, 0x9f, 0x48, 0x78, 0xc1, 0xe5, 0x27, 0xbb, 0xca, 0xe5, 0x3e, 0x25, 0x2b, 0x6b, 0x1b, 0x3e, 0x95, 0x18, 0xeb, 0xc2, 0xa9, 0x5a, 0x50, 0xe6, 0xe1, 0x64, 0x3e, 0xcb, 0xa1, 0x5b, 0xdd, 0x9a,
                0x29, 0x54, 0x8d, 0xa8, 0x19, 0x7c, 0x08, 0x4d, 0x38, 0xe9, 0x6e, 0xee, 0x0c, 0x9b, 0xcd, 0x13,
                0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x00, 0x04, 0x04, 0x04, 0x04
            };
        const uint8_t* _HW_key = (const uint8_t*)_HW_data;
        const uint8_t* _HW_iv = (const uint8_t*)_HW_data + 32;
        uint8_t _HW_buf[16];
        const uint8_t* _HW_enc = (const uint8_t*)_HW_data + 48;
        memcpy(_HW_buf, _HW_enc, 16);

        struct aes_ctx ctx;
        aes_init_ctx_iv(&ctx, _HW_key, _HW_iv);
        aes_cbc_decrypt_buffer(&ctx, _HW_buf, 16);

        //TODO verify padding
        const char* HW = (const char*)_HW_buf;
    puts(HW);

        memset(_HW_buf, 0, 16);
      }}
